{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create an ELB. Add DNS record for the same.",

  "Parameters" : {
    "ELBName" : {
      "Description" : "Name for the loadbalancer",
      "Type" : "String"
    },
    "ELBSecurityGroups" : {
      "Description" : "Existing Security group for the load balancer",
      "Type" : "AWS::EC2::SecurityGroup::Id",
      "Default" : "sg-e83ad38c"
    },
    "ELBConnectionDrainingPolicy" : {
      "Description" : "Enable/disable connection draining for the ELB. When you enable Connection Draining on a load balancer, any back-end instances that you deregister will complete requests that are in progress before deregistration. Likewise, if a back-end instance fails health checks, the load balancer will not send any new requests to the unhealthy instance but will allow existing requests to complete.",
      "Type" : "String",
      "Default" : "true"
    },
    "ELBConnectionDrainingPolicyTimeout" : {
      "Description" : "Timeout for ELB Connection Draining. The time in seconds after the load balancer closes all connections to a deregistered or unhealthy instance.",
      "Type" : "Number",
      "Default" : "300"
    },
    "ELBCrossZone" : {
      "Description" : "Whether cross-zone load balancing is enabled for the load balancer. With cross-zone load balancing, your load balancer nodes route traffic to the back-end instances across all Availability Zones. By default the CrossZone property is false.",
      "Type" : "String",
      "Default" : "false"
    },
    "ELBHealthCheckHealthyThreshold" : {
      "Description" : "Specifies the number of consecutive health probe successes required before moving the instance to the Healthy state.",
      "Type" : "String",
      "Default" : "3"
    },
    "ELBHealthCheckInterval" : {
      "Description" : "Specifies the approximate interval, in seconds, between health checks of an individual instance.",
      "Type" : "String",
      "Default" : "5"
    },
    "ELBHealthCheckTarget" : {
      "Description" : "Specifies the instance's protocol and port to check. The protocol can be TCP, HTTP, HTTPS, or SSL. The range of valid ports is 1 through 65535. For TCP and SSL, you specify a port pair. For example, you can specify TCP:5000 or SSL:5000. The health check attempts to open a TCP or SSL connection to the instance on the port that you specify. If the health check fails to connect within the configured timeout period, the instance is considered unhealthy. For HTTP or HTTPS, you specify a port and a path to ping (HTTP or HTTPS:port/PathToPing). For example, you can specify HTTP:80/weather/us/wa/seattle. In this case, an HTTP GET request is issued to the instance on the given port and path. If the health check receives any response other than 200 OK within the configured timeout period, the instance is considered unhealthy. The total length of the HTTP or HTTPS ping target cannot be more than 1024 16-bit Unicode characters.",
      "Type" : "String",
      "Default" : "TCP:8080"
    },
    "ELBHealthCheckTimeout" : {
      "Description" : "Specifies the amount of time, in seconds, during which no response means a failed health probe. This value must be less than the value for Interval.",
      "Type" : "String",
      "Default" : "5"
    },
    "ELBHealthCheckUnhealthyThreshold" : {
      "Description" : "Specifies the number of consecutive health probe failures required before moving the instance to the Unhealthy state.",
      "Type" : "String",
      "Default" : "2"
    },
    "ELBListenersInstancePort" : {
      "Description" : "Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the load balancer.",
      "Type" : "String",
      "Default" : "8080"
    },
    "ELBListenersInstanceProtocol" : {
      "Description" : "Specifies the protocol to use for routing traffic to back-end instances—HTTP, HTTPS, TCP, or SSL. This property cannot be modified for the life of the load balancer. If the front-end protocol is HTTP or HTTPS, InstanceProtocol has to be at the same protocol layer, i.e., HTTP or HTTPS. Likewise, if the front-end protocol is TCP or SSL, InstanceProtocol has to be TCP or SSL. If there is another listener with the same InstancePort whose InstanceProtocol is secure, i.e., HTTPS or SSL, the listener's InstanceProtocol has to be secure, i.e., HTTPS or SSL. If there is another listener with the same InstancePort whose InstanceProtocol is HTTP or TCP, the listener's InstanceProtocol must be either HTTP or TCP.",
      "Type" : "String",
      "Default" : "HTTP"
    },
    "ELBListenersLoadBalancerPort" : {
      "Description" : "Specifies the external load balancer port number. This property cannot be modified for the life of the load balancer.",
      "Type" : "String",
      "Default" : "80"
    },
    "ELBListenersProtocol" : {
      "Description" : "Specifies the load balancer transport protocol to use for routing — HTTP, HTTPS, TCP or SSL. This property cannot be modified for the life of the load balancer.",
      "Type" : "String",
      "Default" : "HTTP"
    },
    "ELBScheme" : {
      "Description" : "For load balancers attached to an Amazon VPC, this parameter can be used to specify the type of load balancer to use. Specify internal to create an internal load balancer with a DNS name that resolves to private IP addresses or internet-facing to create a load balancer with a publicly resolvable DNS name, which resolves to public IP addresses. If you specify internal, you must specify subnets to associate with the load balancer, not Availability Zones.",
      "Type" : "String",
      "Default" : "internet-facing"
    },
    "ELBSubnets" : {
      "Description" : "A list of subnet IDs in your virtual private cloud (VPC) to attach to your load balancer. You can specify either AvailabilityZones or Subnets, but not both.",
      "Type" : "CommaDelimitedList",
      "Default" : "subnet-9808d1c1,subnet-7a6b9051"
    },
    "HostedZone" : {
      "Type" : "String",
      "Description" : "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern" : "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription" : "must be a valid DNS zone name."
    }
  },

  "Mappings" : {
    "AWSRegionCodes" : {
      "us-east-1"      : { "Code" : "ue1" },
      "us-west-1"      : { "Code" : "uw1" },
      "us-west-2"      : { "Code" : "uw2" },
      "eu-west-1"      : { "Code" : "ew1" },
      "sa-east-1"      : { "Code" : "se1" },
      "ap-southeast-1" : { "Code" : "ase1" },
      "ap-southeast-2" : { "Code" : "ase2" },
      "ap-northeast-1" : { "Code" : "ane1" }
    }
  },

  "Resources" : {
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "ConnectionDrainingPolicy" : {
          "Enabled" : { "Ref" : "ELBConnectionDrainingPolicy" },
          "Timeout" : { "Ref" : "ELBConnectionDrainingPolicyTimeout" }
        },
      "LoadBalancerName" : { "Ref" : "ELBName" },
      "SecurityGroups" : [ { "Ref" : "ELBSecurityGroups" } ],
        "Subnets" : { "Ref" : "ELBSubnets" },
        "Scheme" : { "Ref" : "ELBScheme" },
        "CrossZone" : { "Ref" : "ELBCrossZone" },
        "Listeners" : [ {
          "LoadBalancerPort" : { "Ref" : "ELBListenersLoadBalancerPort" },
          "InstancePort" : { "Ref" : "ELBListenersInstancePort" },
          "Protocol" : { "Ref" : "ELBListenersProtocol" }
        } ],
        "HealthCheck" : {
          "Target" : { "Ref" : "ELBHealthCheckTarget" },
          "HealthyThreshold" : { "Ref" : "ELBHealthCheckHealthyThreshold" },
          "UnhealthyThreshold" : { "Ref" : "ELBHealthCheckUnhealthyThreshold" },
          "Interval" : { "Ref" : "ELBHealthCheckInterval" },
          "Timeout" : { "Ref" : "ELBHealthCheckTimeout" }
        },
        "Tags" : {
          "Key" : "Name",
          "Value" : { "Ref" : "ELBName" }
        }
      }
    }
  },

  "Outputs" : {
  }
}